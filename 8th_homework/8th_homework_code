#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string>
#include <fstream>

using namespace std;

class Train
{
	int Hour, Minute, Seats;
	string Departure_station, Arrival_station, Kind_of_Train;

public :

	Train* next_train;

	Train()
	{
		Hour = 0;
		Minute = 0;
		Seats = 0;
		Departure_station = "";
		Arrival_station = "";
		Kind_of_Train = "";
		next_train = NULL;
	}

	void Get_train_info(int h, int m, string ds, string as, string kot, int nos);
	void Print_train_info();

	int push_hour() { return Hour; }
	int push_minute() { return Minute; }
	string push_departure() { return Departure_station; }
	string push_arrival() { return Arrival_station; }
	string push_KoT() { return Kind_of_Train; }
	int push_seats() { return Seats; }

	void sub_seat() { Seats--; }

};

void Train::Get_train_info(int h, int m, string ds, string as, string kot, int nos)
{
	Hour = h;
	Minute = m;
	Departure_station = ds;
	Arrival_station = as;
	Kind_of_Train = kot;
	Seats = nos;
}

void Train::Print_train_info()
{
	cout << Hour << ":" << Minute << " " << Departure_station << " -> " << Arrival_station << " " << Kind_of_Train;
	if (Seats == 0)
	{
		cout << " 매진" << endl;
	}
	else
	{
		cout << " " << Seats << endl;
	}
}

class Train_Table
{
public:
	Train* head;
	Train* tail;

	Train_Table()
	{
		Train* dummy;
		dummy = new Train();

		head = dummy;
		tail = dummy;
	}

	void Load_Train_Table();
	void Print_Train_Table();

};

void Train_Table::Load_Train_Table()
{
	FILE* txtfile;
	txtfile = fopen("TrainList.txt", "r");

	string temp;
	fscanf(txtfile, "%s", &temp);

	while (true)
	{
		if (feof(txtfile))
		{
			break;
		}

		int h, m, s;
		string ds, as, kot;
		fscanf(txtfile, "%d:%d %s -> %s %s %d", &h, &m, &ds, &as, &kot, &s);

		Train* ntrain = new Train();
		ntrain->Get_train_info(h, m, ds, as, kot, s);
		tail->next_train = ntrain;
		tail = ntrain;
	}
	
	fclose(txtfile);

}

void Train_Table::Print_Train_Table()
{
	Train* current = new Train();
	current = head->next_train;
	while (current != NULL)
	{
		current->Print_train_info();
		current = current->next_train;
	}
}

class Person : public Train_Table
{
	Train* head_ticket;
	Train* tail_ticket;
public :
	Person()
	{
		Train* dummy_ticket;
		dummy_ticket = new Train();

		head_ticket = dummy_ticket;
		tail_ticket = dummy_ticket;
	}

	void Reserve_Train();
	void Check_Ticket();
	void Cancel_Ticket();
	void Menu();

};


void Person::Reserve_Train()
{
	int h, m, seats;
	string ds, as, kot;

	try
	{
		cout << "원하는 시(hour)를 입력하세요 : ";
		cin >> h;
		if (h < 0 || h > 23)
			throw h;
	}
	catch (int error)
	{
		cout << "Hour의 범위는 0 ~ 23입니다." << endl;
	}

	try
	{
		cout << "원하는 분(min)을 입력하세요 : ";
		cin >> m;
		if (m < 0 || m > 59)
			throw m;
	}
	catch (int error)
	{
		cout << "Minute의 범위는 0 ~ 59입니다." << endl;
	}
	
	cout << "출발역과 도착역을 입력하세요(ex 서울 부산) : ";
	cin >> ds >> as;
	cout << "원하는 열차 종류를 입력 하세요 : ";
	cin >> kot;

	cout << "입력하신 정보입니다." << endl;
	cout << h << ":" << m << " " << ds << " -> " << as << " " << kot << endl << endl;

	bool find = false;
	Train* Check = new Train();
	Check = head->next_train;

	while (!find && Check != NULL)
	{
		if (ds == Check->push_departure())
		{
			if (as == Check->push_arrival())
			{
				if (kot == Check->push_KoT())
				{
					if (h <= Check->push_hour())
					{
						if (m <= Check->push_minute())
						{
							if (Check->push_seats() > 0)
								find == true;
						}
					}
				}
			}
		}

		if (find == false)
		{
			Check == Check->next_train;
		}
	}

	if (find == false)
	{
		cout << "찾으시는 기차가 없습니다. " << endl;
	}
	else
	{
		cout << "가장 빠른 열차입니다." << endl;
		cout << Check->push_hour() << ":" << Check->push_minute() << " " << Check->push_departure()
			<< " -> " << Check->push_arrival() << " " << Check->push_KoT() << Check->push_seats();
		
		int i;
		do
		{
			try 
			{
				cout << "예매 하시겠습니까?" << endl;
				cout << "0) 뒤로 가기" << endl << "1) 예매" << endl;
				cin >> i;
			
				if (i == 1)
				{
					Check->sub_seat();

					Train* nticket = new Train();
					nticket->Get_train_info(Check->push_hour(), Check->push_minute(), Check->push_departure(),
						Check->push_arrival(), Check->push_KoT(), Check->push_seats());
					tail_ticket->next_train = nticket;
					tail = nticket;
				}
				else if (i == 0)
				{
					return;
				}
				else
				{
					throw i;
				}
			}
			catch (int i)
			{
				cout << "잘못된 입력입니다. 다시 입력해 주세요 : " << endl;
			}
		} while (i > 1 || i < 0);
	}

}

void Person::Check_Ticket()
{
	Train* current = new Train();
	current = head_ticket->next_train;

	while (current == NULL)
	{
		current->Print_train_info();
		current = current->next_train;
	}
}

void Person::Cancel_Ticket()
{
	int i;

	do
	{
		try
		{
			cout << "예매한 표를 취소하시겠습니까?" << endl
				<< "0) 뒤로 가기" << endl
				<< "1) 표 취소" << endl;
			cin >> i;

			if (i == 1)
			{
				head_ticket->next_train = NULL;
			}
			else if (i == 0)
			{
				NULL;
			}
			else
			{
				throw i;
			}
		}
		catch (int i)
		{
			cout << "잘못된 입력입니다." << endl;
		}

	} while (i != 2);
}

void Person::Menu()
{
	int i;

	do
	{
		cout << "원하는 메뉴를 입력하세요" << endl
			<< "1) 빠른 예매" << endl
			<< "2) 기차 현황 확인" << endl
			<< "3) 나의 예매목록 확인 및 예매 취소" << endl
			<< "4) 프로그램 종료" << endl;
		cin >> i;

		switch (i)
		{
		case 1:
			Reserve_Train();
			break;
		case 2:
			Print_Train_Table();
			break;
		case 3:
			Check_Ticket();
			Cancel_Ticket();
			break;
		case 4:
			break;
		default:
			cout << "잘못된 입력입니다." << endl;
			break;
		}

	} while (i != 4);
}

int main()
{
	Person I;
	Person* I_p = &I;
	I_p->Load_Train_Table();
	I_p->Menu();

	return 0;
}
