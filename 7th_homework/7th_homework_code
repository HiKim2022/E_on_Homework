#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <fstream>
#include <string>

using namespace std;

enum { Add = 1, Search, Modify, Delete, Print, Save, Exit };
enum { bookname = 1, author, pyear, pname, genre};

class Book
{
private:
	string Book_Name, Author, P_Name, Genre;
	int P_Year;

public:
	Book()
	{
		Book_Name = "";
		Author = "";
		P_Year = 0;
		P_Name = "";
		Genre = "";

		next_Book = NULL;
	}

	Book* next_Book;

	void Show_Book_Info();
	void Get_Book_Info(string nBN, string nA, int nPY, string nPN, string nG);
	string push_Book_Name() { return Book_Name; }
	string push_Author() { return Author; }
	int push_P_Year() { return P_Year; }
	string push_P_Name() { return P_Name; }
	string push_Genre() { return Genre; }
};

void Book::Get_Book_Info(string nBN, string nA, int nPY, string nPN, string nG)
{
	Book_Name = nBN;
	Author = nA;
	P_Year = nPY;
	P_Name = nPN;
	Genre = nG;
}

void Book::Show_Book_Info()
{
	cout << Book_Name << "\t" << Author << "\t" << P_Year << "\t" << P_Name << "\t" << Genre << endl;
}

class Book_List : public Book
{
	Book* head;
	Book* tail;
public:
	Book_List()
	{
		Book* init_node;
		init_node = new Book();

		head = init_node;
		tail = init_node;
	}

	void Load_txt();
	void Save_txt();

	void Add_Book();
	void Search_Book();
	void Modify_Book();
	void Delete_Book();
	void Print_Book_List();

	void Managing_Book();
};

void Book_List::Load_txt()
{
	FILE *txtfile;
	txtfile = fopen("input.txt", "r");

	while (true)
	{
		if (!feof(txtfile))
		{
			break;
		}

		string BN, A, PY, PN, G;
		fscanf(txtfile, "%s %s %s %s %s\n", &BN, &A, &PY, &PN, &G);

		Book n_Book;
		Book* n_Book_p = &n_Book;
		n_Book_p->Get_Book_Info(BN, A, stoi(PY), PN, G);

		tail->next_Book = n_Book_p;
		tail = n_Book_p;
	}
	
	fclose(txtfile);
}

void Book_List::Save_txt()
{
	FILE* txtfile;
	txtfile = fopen("input.txt", "w");

	Book* Check_Point;
	Check_Point = head->next_Book;

	while (true)
	{
		fprintf(txtfile, "%s %s %d %s %s\n", Check_Point->push_Book_Name(), Check_Point->push_Author()
			, Check_Point->push_P_Year(), Check_Point->push_P_Name(), Check_Point->push_Genre());

		Check_Point = Check_Point->next_Book;
		if (Check_Point = NULL)
		{
			break;
		}
	}

	fclose(txtfile);
}

void Book_List::Add_Book()
{
	Book* new_Book;
	new_Book = new Book();

	string nnb, na, npn, ng;
	int npy;

	cout << "추가하실 책의 이름을 적어주세요.";
	cin >> nnb;

	cout << "추가하실 책의 저자를 적어주세요.";
	cin >> na;

	cout << "추가하실 책의 출판연도를 적어주세요.";
	cin >> npy;

	cout << "추가하실 책의 출판사를 적어주세요.";
	cin >> npn;

	cout << "추가하실 책의 장르를 적어주세요.";
	cin >> ng;

	new_Book->Get_Book_Info(nnb, na, npy, npn, ng);

	tail->next_Book = new_Book;
	tail = new_Book;

}

void Book_List::Search_Book()
{
	cout << "검색 테마를 입력해 주세요 : " << endl
		<< "1) 책 이름" << endl
		<< "2) 저자 이름" << endl
		<< "3) 출판연도" << endl
		<< "4) 출판사" << endl
		<< "5) 책 장르" << endl;

	int itheme, i;
	cin >> itheme;

	string sinput;
	int iinput;

	Book* Check_Point;
	Check_Point = new Book();

	switch (itheme)
	{
	case bookname:
		cout << "책 이름을 입력해 주세요 : ";
		cin >> sinput;

		Check_Point = head->next_Book;
		i = 0;

		while (Check_Point != NULL)
		{
			if (sinput == Check_Point->push_Book_Name())
			{
				cout << "찾으시는 책의 정보입니다." << endl;
				Check_Point->Show_Book_Info();
				cout << endl;
				i++;
			}
			Check_Point = Check_Point->next_Book;
		}

		if (i == 0)
		{
			cout << "찾으시는 책이 없습니다." << endl << endl;
		}

		break;

	case author:
		cout << "저자를 입력해 주세요 : ";
		cin >> sinput;

		Check_Point = head->next_Book;
		i = 0;

		while (Check_Point != NULL)
		{
			if (sinput == Check_Point->push_Author())
			{
				cout << "찾으시는 책의 정보입니다." << endl;
				Check_Point->Show_Book_Info();
				cout << endl;
				i++;
			}
			Check_Point = Check_Point->next_Book;
		}

		if (i == 0)
		{
			cout << "찾으시는 책이 없습니다." << endl << endl;
		}

		break;

	case pyear:
		cout << "출판 연도를 입력해 주세요 : ";
		cin >> iinput;

		i = 0;

		while (Check_Point != NULL)
		{
			if (iinput == Check_Point->push_P_Year())
			{
				cout << "찾으시는 책의 정보입니다." << endl;
				Check_Point->Show_Book_Info();
				cout << endl;
				i++;
			}
			Check_Point = Check_Point->next_Book;
		}

		if (i == 0)
		{
			cout << "찾으시는 책이 없습니다." << endl << endl;
		}

		break;

	case pname:
		cout << "출판사를 입력해 주세요 : ";
		cin >> sinput;

		Check_Point = head->next_Book;
		i = 0;

		while (Check_Point != NULL)
		{
			if (sinput == Check_Point->push_P_Name())
			{
				cout << "찾으시는 책의 정보입니다." << endl;
				Check_Point->Show_Book_Info();
				cout << endl;
				i++;
			}
			Check_Point = Check_Point->next_Book;
		}

		if (i == 0)
		{
			cout << "찾으시는 책이 없습니다." << endl << endl;
		}

		break;

	case genre:
		cout << "장르를 입력해 주세요 : ";
		cin >> sinput;

		Check_Point = head->next_Book;
		i = 0;

		while (Check_Point != NULL)
		{
			if (sinput == Check_Point->push_Genre())
			{
				cout << "찾으시는 책의 정보입니다." << endl;
				Check_Point->Show_Book_Info();
				cout << endl;
				i++;
			}
			Check_Point = Check_Point->next_Book;
		}

		if (i == 0)
		{
			cout << "찾으시는 책이 없습니다." << endl << endl;
		}

		break;

	}

}

void Book_List::Modify_Book()
{
	string sinput;
	int i = 0;

	cout << "수정할 책의 이름을 적어주세요 : ";
	cin >> sinput;

	Book* Check_Point;
	Check_Point = new Book();
	Check_Point = head->next_Book;

	while (Check_Point != NULL)
	{
		if (sinput == Check_Point->push_Book_Name())
		{
			cout << "수정할 책의 정보입니다." << endl;
			Check_Point->Show_Book_Info();
			cout << endl;
			i++;
			break;
		}
		Check_Point = Check_Point->next_Book;
	}

	if (i == 0)
	{
		cout << "찾으시는 책이 없습니다." << endl << endl;
	}

	string nnb, na, npn, ng;
	int npy;

	cout << "책의 이름을 적어주세요.";
	cin >> nnb;

	cout << "책의 저자를 적어주세요.";
	cin >> na;

	cout << "책의 출판연도를 적어주세요.";
	cin >> npy;

	cout << "책의 출판사를 적어주세요.";
	cin >> npn;

	cout << "책의 장르를 적어주세요.";
	cin >> ng;

	Check_Point->Get_Book_Info(nnb, na, npy, npn, ng);

}

void Book_List::Delete_Book()
{
	string sinput;
	int i = 0;

	cout << "삭제할 책의 이름을 적어주세요 : ";
	cin >> sinput;

	Book* Check_Point1, * Check_Point2;
	Check_Point1 = new Book();
	Check_Point2 = new Book();
	Check_Point1 = head;
	Check_Point2 = head->next_Book;

	while (Check_Point2 != NULL)
	{
		if (sinput == Check_Point2->push_Book_Name())
		{
			cout << "삭제할 책의 정보입니다." << endl;
			Check_Point2->Show_Book_Info();
			i++;

			Check_Point2 = Check_Point2->next_Book;
			Check_Point1->next_Book = Check_Point2;

			cout << "삭제하였습니다." << endl << endl;

			break;
		}
		Check_Point2 = Check_Point2->next_Book;
		Check_Point1 = Check_Point1->next_Book;
	}

	if (i == 0)
	{
		cout << "찾으시는 책이 없습니다." << endl << endl;
	}
}

void Book_List::Print_Book_List()
{
	cout << "현재 도서 목록입니다." << endl;

	Book* Check_Point;
	Check_Point = new Book();
	Check_Point = head->next_Book;

	while (Check_Point != NULL)
	{
		Check_Point->Show_Book_Info();
		cout << endl;
		Check_Point = Check_Point->next_Book;
	}
}

void Book_List::Managing_Book()
{
	int imenu;

	do
	{
		cout << "원하시는 메뉴를 입력하세요." << endl
			<< "1) 도서 추가" << endl
			<< "2) 도서 검색" << endl
			<< "3) 도서 정보 수정" << endl
			<< "4) 도서 삭제" << endl
			<< "5) 도서 목록 출력" << endl
			<< "6) 저장" << endl
			<< "7) 프로그램 나가기(자동저장)" << endl;

		cin >> imenu;

		switch (imenu)
		{
		case Add:
			Add_Book();
			break;
		case Search:
			Search_Book();
			break;
		case Modify:
			Modify_Book();
			break;
		case Delete:
			Delete_Book();
			break;
		case Print:
			Print_Book_List();
			break;
		case Save:
		case Exit:
			Save_txt();
			break;
		}

		if (imenu < 1 || imenu > 7)
		{
			cout << "잘못된 입력입니다." << endl << endl;
		}
		else
		{
			cout << endl;
		}

	} while (imenu != 7);

	cout << "프로그램을 종료합니다." << endl;
}

int main()
{
	Book_List Book_DB;
	Book_List* Book_DB_p = &Book_DB;

	Book_DB_p->Load_txt();
	Book_DB_p->Managing_Book();

	return 0;
}
